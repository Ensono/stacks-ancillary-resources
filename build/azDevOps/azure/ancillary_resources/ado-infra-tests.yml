name: infrastructure-tests

# Include necessary variables for this pipeline file
variables:
  - group: ensono-sp-creds
  - template: ../agent-config-vars.yml

  # Cloud
  - name: CLOUD_PLATFORM
    value: azure

  # Licensing
  - name: CHEF_LICENSE
    value: accept-silent

stages:

  - stage: infrastructure_tests

    jobs:

      - job: terraform_state
        displayName: Terraform State
        pool:
          vmImage: $(pool_vm_image)

        variables:
          - template: azdo-pipeline-vars.yml

        steps:
          - template: ../templates/setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}
              StacksEnvfileVersion: ${{ variables.StacksEnvfileVersion }}

          - template: ../templates/infra-tests.yml
            parameters:
              CHEF_LICENSE: $(CHEF_LICENSE)
              TESTS_PATH: /app/src/terraform_state/tests/$(CLOUD_PLATFORM)
              INSPEC_ARGS: "--input resource_group_name=$(resource_group_name) storage_account_name=$(storage_account_name) region=$(location)"

      - job: ancillary_resources
        displayName: Ancillary Resources
        pool:
          vmImage: $(pool_vm_image)

        variables:
          - template: ancillary-resources-vars.yml

        steps:
          - template: ../templates/setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}
              StacksEnvfileVersion: ${{ variables.StacksEnvfileVersion }}

          - template: ../templates/infra-tests.yml
            parameters:
              CHEF_LICENSE: $(CHEF_LICENSE)
              TESTS_PATH: /app/src/ancillary_resources/tests/$(CLOUD_PLATFORM)
              INSPEC_ARGS: "--input resource_group_name=$(resource_group_name) region=$(location) container_registry_name=$(container_registry_name) dns_zones=$(dns_zones) la_workspace=$(la_workspace) la_sku=$(la_sku) la_retention=$(la_retention) key_vault=$(key_vault) azure_application_id=$(ARM_CLIENT_ID)"

      - job: upload_tests
        displayName: Upload Tests
        pool:
          vmImage: $(pool_vm_image)

          steps:
          
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: outputs/tests/*.xml       
