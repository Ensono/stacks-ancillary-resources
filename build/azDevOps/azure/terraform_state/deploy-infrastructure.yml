name: "$(Build.SourceBranchName)-init"

# define parameters that can be selected at runtime to define
# what jobs should be performed
parameters:
  - name: deploy_tf_state
    displayName: Deploy Terraform State storage
    type: boolean
    default: false
  - name: deploy_ancillary_resources
    displayName: Deploy Amido Stacks ancillary resources
    type: boolean
    default: false

# Include the variables for this pipeline file
variables:
  - template: azdo-pipeline-vars.yml
  - group: azure-sp-creds

stages:

  - stage: Deployment

    jobs:
      - job: terraform_state
        displayName: Terraform State
        condition: eq('${{ parameters.deploy_tf_state }}', 'true')
        pool:
          vmImage: $(pool_vm_image)

        steps:
          - template: ../templates/setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}
              StacksEnvfileVersion: ${{ variables.StacksEnvfileVersion }}

          - task: Bash@3
            displayName: "TaskCTL: Infrastructure"
            inputs:
              targetType: inline
              script: taskctl infrastructure
            env:
              STAGE: terraform_state
              DOCKER_IMAGE_TAG: $(version_number)
              TF_FILE_LOCATION: /app/src/terraform_state/terraform/$(CLOUD_PLATFORM)
              TF_BACKEND: none

              # Azure Terraform environment variables
              TF_VAR_resource_group_name: $(resource_group_name)
              TF_VAR_location: $(location)
              TF_VAR_name: $(company)

              # AWS Terraform environment variables
              TF_VAR_region: $(location)
              TF_VAR_application_name: $(application_name)

              TESTS_PATH: ""

          - template: ../templates/infra-tests.yml
            parameters:
              CHEF_LICENSE: $(CHEF_LICENSE)
              TESTS_PATH: /app/src/terraform_state/tests/$(CLOUD_PLATFORM)

      - job: ancillary_resources
        displayName: Ancillary Resources
        condition: and(eq('${{ parameters.deploy_ancillary_resources }}', 'true'), ne(variables.CLOUD_PLATFORM, 'aws'))
        pool:
          vmImage: $(pool_vm_image)

        steps:
          - template: ../templates/setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}
              StacksEnvfileVersion: ${{ variables.StacksEnvfileVersion }}

          - task: Bash@3
            displayName: "TaskCTL: Infrastructure"
            inputs:
              targetType: inline
              script: taskctl infrastructure
            env:
              DOCKER_IMAGE_TAG: $(version_number)
              TF_FILE_LOCATION: /app/src/ancillary_resources/terraform/$(CLOUD_PLATFORM)
              TF_BACKEND: none

              STAGE: anciallry_resources

          - template: ../templates/infra-tests.yml
            parameters:
              CHEF_LICENSE: $(CHEF_LICENSE)
              TESTS_PATH: /app/src/ancillary_resources/tests/$(CLOUD_PLATFORM)

